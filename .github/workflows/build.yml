name: Build executables

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11"]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # ü™ü Windows dependency install
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install pyinstaller

      # üêß Linux dependency install
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

      # ü™ü Windows build (uses ; in --add-data)
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pyinstaller `
            --onefile `
            --name BlazeRoadEditor `
            --icon=asset/icon.ico `
            --add-data "asset;asset" `
            --paths . `
            --paths src `
            --paths core `
            --paths ui `
            --hidden-import core `
            --hidden-import ui `
            --hidden-import numpy `
            --hidden-import distutils `
            --noconsole `
            src/app.py

      # üêß Linux build (uses : in --add-data)
      - name: Build (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          pyinstaller \
            --onefile \
            --name BlazeRoadEditor \
            --icon=asset/icon.ico \
            --add-data "asset:asset" \
            --paths . \
            --paths src \
            --paths core \
            --paths ui \
            --hidden-import core \
            --hidden-import ui \
            --hidden-import numpy \
            --hidden-import distutils \
            --noconsole \
            src/app.py

      # üì¶ Zip the builds for convenience
      - name: Package zips
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then powershell Compress-Archive -Path dist\* -DestinationPath BlazeRoadEditor-Windows.zip; fi
          if [ "$RUNNER_OS" = "Linux" ]; then zip -j BlazeRoadEditor-Linux.zip dist/*; fi

      # ‚òÅÔ∏è Upload artifacts (zips + raw dist)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-BlazeRoadEditor
          path: |
            BlazeRoadEditor-*.zip
            dist/**
